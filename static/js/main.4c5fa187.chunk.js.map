{"version":3,"sources":["components/counter.jsx","components/Counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","_this","this","react_default","a","createElement","className","changing_classes","formate","onClick","props","onIncrement","counters","id","onDecrement","disabled","value","onDelete","Component","Counters","onReset","map","counter","components_counter","key","Navbar","state","totalcounters","App","handleDelete","counterId","filter","c","setState","handleIncrement","newCounters","handleDecrement","handleReset","navbar","length","components_Counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c5fa187.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <span className={this.changing_classes()}>{this.formate()}</span>\r\n        <button\r\n          className=\"Increment-btn\"\r\n          onClick={() => this.props.onIncrement(this.props.counters.id)}\r\n        >\r\n          +\r\n        </button>\r\n\r\n        <button\r\n          className=\"Decrement-btn\"\r\n          onClick={() => this.props.onDecrement(this.props.counters.id)}\r\n          disabled={this.props.counters.value === 0 ? \"disabled\" : \"\"}\r\n        >\r\n          -\r\n        </button>\r\n        <button\r\n          className=\"del-btn\"\r\n          onClick={() => this.props.onDelete(this.props.counters.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  formate() {\r\n    if (this.props.counters.value === 0) {\r\n      // return <h1>Zero</h1>;\r\n      return \"Zero\";\r\n    } else {\r\n      return this.props.counters.value;\r\n    }\r\n    // return this.state.count === 0 ? \"Zero\" : this.state.count;\r\n  }\r\n\r\n  changing_classes() {\r\n    let classes = \"main-heading-\";\r\n    return (classes += this.props.counters.value === 0 ? \"warning\" : \"primary\");\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nimport \"./counter.css\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"reset-btn\" onClick={this.props.onReset}>\r\n          Reset\r\n        </button>\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            counters={counter}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            onDecrement={this.props.onDecrement}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\nimport \"./counter.css\";\r\n\r\nclass Navbar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className=\"navbar-heading\">NavBAr</span>\r\n        <span className=\"navbar-counter\"> {this.props.totalcounters}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport Counters from \"./components/Counters\";\n\nimport Navbar from \"./components/navbar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n  render() {\n    return (\n      <div>\n        <Navbar totalcounters={this.state.counters.length} />\n        <main className=\"container\" />\n        <Counters\n          counters={this.state.counters}\n          onReset={this.handleReset}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n        />\n\n        <main />\n      </div>\n    );\n  }\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleIncrement = counterId => {\n    // const counters = [...this.state.counters];\n    // const index = counters.indexOf(counterId);\n    // counters[index] = { ...counterId };\n    // counters[index].value++;\n    // this.setState({ counters });\n    const newCounters = this.state.counters.map(c => {\n      if (c.id === counterId) {\n        c.value++;\n      }\n      return c;\n    });\n    this.setState({ newCounters });\n  };\n\n  handleDecrement = counterId => {\n    // const counters = [...this.state.counters];\n    // const index = counters.indexOf(counterId);\n    // counters[index] = { ...counterId };\n    // counters[index].value--;\n    // this.setState({ counters });\n    const newCounters = this.state.counters.map(c => {\n      if (c.id === counterId) {\n        c.value--;\n      }\n      return c;\n    });\n    this.setState({ newCounters });\n  };\n\n  handleReset = () => {\n    const newCounters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ newCounters });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}